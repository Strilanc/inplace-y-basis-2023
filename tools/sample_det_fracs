#!/usr/bin/env python3

import argparse

import numpy as np
import sinter
import stim


def circuit_det_frac(circuit: stim.Circuit) -> sinter.AnonTaskStats:
    num_shots = 2**13
    shots = circuit.compile_detector_sampler().sample_bit_packed(shots=num_shots)
    num_detection_events = 0
    for k in range(8):
        num_detection_events += np.count_nonzero(shots & np.uint8(1 << k))
    return sinter.AnonTaskStats(shots=num_shots * circuit.num_detectors, errors=num_detection_events, discards=0, seconds=0)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--circuits",
        type=str,
        required=True,
        nargs='+',
    )
    args = parser.parse_args()

    print(sinter.CSV_HEADER)
    # print("detection_fraction,strong_id")
    for c in args.circuits:
        circuit = stim.Circuit.from_file(c)
        det_frac = circuit_det_frac(circuit)
        task = sinter.Task(
            circuit=circuit,
            detector_error_model=circuit.detector_error_model(decompose_errors=True),
            decoder='internal_correlated',
            json_metadata=sinter.comma_separated_key_values(c),
        )
        print(sinter.TaskStats(
            strong_id=task.strong_id(),
            decoder='detection_fraction',
            json_metadata=task.json_metadata,
            shots=det_frac.shots,
            seconds=det_frac.seconds,
            errors=det_frac.errors,
            discards=det_frac.discards,
        ))
        # print(f'{det_frac},'.ljust(25) + strong_id)


if __name__ == '__main__':
    main()
