#!/usr/bin/env python3

import argparse
import itertools
import pathlib

from midout import gen
from midout._make_circuit import make_circuit


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--out_dir",
        type=str,
        required=True,
    )
    parser.add_argument("--distance", nargs='+', required=True, type=int)
    parser.add_argument("--memory_rounds", nargs='+', required=True, type=str)
    parser.add_argument("--boundary_rounds", nargs='+', required=True, type=str)
    parser.add_argument("--noise_strength", nargs='+', required=True, type=float)
    parser.add_argument("--noise_model", nargs='+', required=True, choices=['SI1000', 'UniformDepolarizing', 'None'])
    parser.add_argument("--basis", nargs='+', required=True, choices=[
        'X',
        'Y',
        'Z',
        'X_magic_idle',
        'Y_magic_idle',
        'Z_magic_idle',
        'Y_braid',
        'Y_magic_transition',
        'Y_folded',
    ])
    parser.add_argument("--extra", nargs='+', default=(None,))
    parser.add_argument("--extra2", nargs='+', default=(None,))
    parser.add_argument("--extra3", nargs='+', default=(None,))
    parser.add_argument("--debug_out_dir", default=None, type=str)
    args = parser.parse_args()

    out_dir = pathlib.Path(args.out_dir)
    out_dir.mkdir(exist_ok=True, parents=True)
    debug_out_dir = None
    if args.debug_out_dir is not None:
        debug_out_dir = pathlib.Path(args.debug_out_dir)
        debug_out_dir.mkdir(exist_ok=True, parents=True)

    for d, p, h, r, noise_model_name, b, extra, extra2, extra3 in itertools.product(
            args.distance,
            args.noise_strength,
            args.boundary_rounds,
            args.memory_rounds,
            args.noise_model,
            args.basis,
            args.extra,
            args.extra2,
            args.extra3):
        if noise_model_name == "SI1000":
            noise_model = gen.NoiseModel.si1000(p)
        elif noise_model_name == "UniformDepolarizing":
            noise_model = gen.NoiseModel.uniform_depolarizing(p)
        elif noise_model_name == "None":
            noise_model = None
        else:
            raise NotImplementedError(f'{noise_model_name=}')

        boundary_rounds = eval(h, {'d': d})
        memory_rounds = eval(r, {'d': d})
        circuit = make_circuit(
            basis=b,
            distance=d,
            noise=noise_model,
            debug_out_dir=debug_out_dir,
            boundary_rounds=boundary_rounds,
            memory_rounds=memory_rounds,
        )
        q = circuit.num_qubits
        extra_tags = ''
        for ex in [extra, extra2, extra3]:
            if ex is not None:
                extra_dict = eval(ex)
                assert isinstance(extra_dict, dict)
                for k, v in extra_dict.items():
                    extra_tags += f',{k}={v}'
        path = out_dir / f'r={memory_rounds},d={d},p={p},noise={noise_model_name},b={b},rb={boundary_rounds},q={q}{extra_tags}.stim'
        with open(path, 'w') as f:
            print(circuit, file=f)
        print(f'wrote file://{path.absolute()}')


if __name__ == '__main__':
    main()
